# Load necessary libraries
library(limma)
install.packages("limma","edgeR")
install.packages("limma")
install.packages("edgeR")
library(edgeR)
# Load your log2-transformed and quantile-normalized data
# Replace "path_to_your_data.csv" with the path to your data file
data_matrix <- read.csv("/Users/piamozdzanowski/VU/Fuzzy_Gene_Sets/data/gemma/Alzheimers_GSE95587_formatted.csv", row.names=1)
View(data_matrix)
# Extract column names
column_names <- colnames(data_matrix)
# Create a data frame with sample information
sample_info <- data.frame(
sample = column_names,
condition = ifelse(grepl("^control", column_names), "control", "disease")
)
# Create the design matrix based on your sample information
# Assuming "condition" is a column in your sample_info that defines the groups
design <- model.matrix(~ condition, data=sample_info)
# Apply voom transformation
v <- voom(data_matrix, design, plot=TRUE)
# Fit linear model to the transformed data
fit <- lmFit(v, design)
# Apply empirical Bayes moderation
fit <- eBayes(fit)
# Extract results and adjust for multiple testing
results <- topTable(fit, adjust="fdr", number=Inf)
install.packages("BiocManager")
BiocManager::install("limma")
# Load necessary libraries
library(limma)
library(edgeR)
BiocManager::install("edgeR")
# Load necessary libraries
library(limma)
library(edgeR)
# Load your log2-transformed and quantile-normalized data
# Replace "path_to_your_data.csv" with the path to your data file
data_matrix <- read.csv("/Users/piamozdzanowski/VU/Fuzzy_Gene_Sets/data/gemma/Alzheimers_GSE95587_formatted.csv", row.names=1)
# Extract column names
column_names <- colnames(data_matrix)
# Create a data frame with sample information
sample_info <- data.frame(
sample = column_names,
condition = ifelse(grepl("^control", column_names), "control", "disease")
)
# Create the design matrix based on your sample information
# Assuming "condition" is a column in your sample_info that defines the groups
design <- model.matrix(~ condition, data=sample_info)
# Apply voom transformation
v <- voom(data_matrix, design, plot=TRUE)
# Load necessary libraries
library(limma)
library(edgeR)
# Load your log2-transformed and quantile-normalized data
# Replace "path_to_your_data.csv" with the path to your data file
data_matrix <- read.csv("/Users/piamozdzanowski/VU/Fuzzy_Gene_Sets/data/gemma/Alzheimers_GSE95587_formatted.csv", row.names=1)
# Extract column names
column_names <- colnames(data_matrix)
# Create a data frame with sample information
sample_info <- data.frame(
sample = column_names,
condition = ifelse(grepl("^control", column_names), "control", "disease")
)
# Create the design matrix based on your sample information
# Assuming "condition" is a column in your sample_info that defines the groups
design <- model.matrix(~ condition, data=sample_info)
# Fit linear model to the log2-transformed data
fit <- lmFit(data_matrix, design)
# Apply empirical Bayes moderation
fit <- eBayes(fit)
# Extract results and adjust for multiple testing
results <- topTable(fit, adjust="fdr", number=Inf)
# Save results to a CSV file
write.csv(results, "differential_expression_results.csv")
# Optional: View the top results
head(results)
# Load necessary libraries
library(limma)
library(edgeR)
# Load your log2-transformed and quantile-normalized data
# Replace "path_to_your_data.csv" with the path to your data file
data_matrix <- read.csv("/Users/piamozdzanowski/VU/Fuzzy_Gene_Sets/data/gemma/Alzheimers_GSE95587_formatted.csv", row.names=1)
# Extract column names
column_names <- colnames(data_matrix)
# Create a data frame with sample information
sample_info <- data.frame(
sample = column_names,
condition = ifelse(grepl("^control", column_names), "control", "disease")
)
# Create the design matrix based on your sample information
# Assuming "condition" is a column in your sample_info that defines the groups
design <- model.matrix(~ condition, data=sample_info)
# Fit linear model to the log2-transformed data
fit <- lmFit(data_matrix, design)
# Apply empirical Bayes moderation
fit <- eBayes(fit)
# Extract results and adjust for multiple testing
results <- topTable(fit, adjust="fdr", number=Inf)
# Save results to a CSV file
write.csv(results, "/Users/piamozdzanowski/VU/Fuzzy_Gene_Sets/data/gemma/Alzheimers_GSE95587_processed.csv")
# Optional: View the top results
head(results)
View(results)
results["ENSG00000009954",]
# Load necessary libraries
library(limma)
library(edgeR)
input_path = "/Users/piamozdzanowski/VU/Fuzzy_Gene_Sets/data/gemma/Alzheimers_GSE95587_formatted.csv"
output_path = "/Users/piamozdzanowski/VU/Fuzzy_Gene_Sets/data/gemma/Alzheimers_GSE95587_ranked.csv"
# Load your log2-transformed and quantile-normalized data
data_matrix <- read.csv(input_path, row.names=1)
# Extract column names
column_names <- colnames(data_matrix)
# Create a data frame with sample information
sample_info <- data.frame(
sample = column_names,
condition = ifelse(grepl("^control", column_names), "control", "disease")
)
# Create the design matrix based on your sample information
design <- model.matrix(~ condition, data=sample_info)
# Fit linear model to the log2-transformed data
fit <- lmFit(data_matrix, design)
# Apply empirical Bayes moderation
fit <- eBayes(fit)
# Extract results and adjust for multiple testing
results <- topTable(fit, adjust="fdr", number=Inf)
# Rename columns
colnames(results)[colnames(results) == "P.Value"] <- "p_value"
colnames(results)[colnames(results) == "adj.P.Val"] <- "adj_p_value"
# Sort results by descending t-statistic
results_sorted <- results[order(results$t, decreasing=TRUE), ]
# Save sorted and renamed results to a CSV file
write.csv(results_sorted, output_path)
# Optional: View the top results
head(results_sorted)
View(results)
View(results_sorted)
View(results)
View(results_sorted)
# Load necessary libraries
library(limma)
library(edgeR)
# Define the input and output path
input_path <- "/Users/piamozdzanowski/VU/Fuzzy_Gene_Sets/data/gemma/Alzheimers_GSE95587_formatted.csv"
output_path <- "/Users/piamozdzanowski/VU/Fuzzy_Gene_Sets/data/gemma/Alzheimers_GSE95587_ranked.csv"
# Load your log2-transformed and quantile-normalized data
data_matrix <- read.csv(input_path, row.names=1)
# Extract column names
column_names <- colnames(data_matrix)
# Create a data frame with sample information
sample_info <- data.frame(
sample = column_names,
condition = ifelse(grepl("^control", column_names), "control", "disease")
)
# Create the design matrix based on your sample information
design <- model.matrix(~ condition, data=sample_info)
# Fit linear model to the log2-transformed data
fit <- lmFit(data_matrix, design)
# Apply empirical Bayes moderation
fit <- eBayes(fit)
# Extract results and adjust for multiple testing
results <- topTable(fit, adjust="fdr", number=Inf)
# Add Ensembl IDs from the row names to the results
results$Ensembl_ID <- rownames(results)
# Rename columns
colnames(results)[colnames(results) == "P.Value"] <- "p_value"
colnames(results)[colnames(results) == "adj.P.Val"] <- "adj_p_value"
# Reorder columns to have Ensembl_ID first
results <- results[, c("Ensembl_ID", setdiff(colnames(results), "Ensembl_ID"))]
# Sort results by descending t-statistic
results_sorted <- results[order(results$t, decreasing=TRUE), ]
# Save sorted and renamed results to a CSV file
write.csv(results_sorted, output_path, row.names=FALSE)
# Optional: View the top results
head(results_sorted)
# Load necessary libraries
library(limma)
library(edgeR)
# Define the input and output path
input_path <- "/Users/piamozdzanowski/VU/Fuzzy_Gene_Sets/data/gemma/Alzheimers_GSE95587_formatted.csv"
output_path <- "/Users/piamozdzanowski/VU/Fuzzy_Gene_Sets/data/gemma/Alzheimers_GSE95587_ranked.csv"
# Load your log2-transformed and quantile-normalized data
data_matrix <- read.csv(input_path, row.names=1)
# Extract column names
column_names <- colnames(data_matrix)
# Create a data frame with sample information
sample_info <- data.frame(
sample = column_names,
condition = ifelse(grepl("^control", column_names), "control", "disease")
)
# Create the design matrix based on your sample information
design <- model.matrix(~ condition, data=sample_info)
# Fit linear model to the log2-transformed data
fit <- lmFit(data_matrix, design)
# Apply empirical Bayes moderation
fit <- eBayes(fit)
# Extract results and adjust for multiple testing
results <- topTable(fit, adjust="fdr", number=Inf)
# Add Ensembl IDs from the row names to the results
results$Ensembl_ID <- rownames(results)
# Rename columns
colnames(results)[colnames(results) == "P.Value"] <- "p_value"
colnames(results)[colnames(results) == "adj.P.Val"] <- "adj_p_value"
# Reorder columns to have Ensembl_ID first and ensure no duplicate Ensembl_IDs
results <- results[, c("Ensembl_ID", setdiff(colnames(results), "Ensembl_ID"))]
# Sort results by descending t-statistic
results_sorted <- results[order(results$t, decreasing=TRUE), ]
# Save sorted and renamed results to a CSV file
write.csv(results_sorted, output_path, row.names=FALSE)
# Optional: View the top results
head(results_sorted)
# Load necessary libraries
library(limma)
library(edgeR)
# Define the input and output path
input_path <- "/Users/piamozdzanowski/VU/Fuzzy_Gene_Sets/data/gemma/Alzheimers_GSE95587_formatted.csv"
output_path <- "/Users/piamozdzanowski/VU/Fuzzy_Gene_Sets/data/gemma/Alzheimers_GSE95587_ranked.csv"
# Load your log2-transformed and quantile-normalized data
data_matrix <- read.csv(input_path, row.names=1)
# Extract column names
column_names <- colnames(data_matrix)
# Create a data frame with sample information
sample_info <- data.frame(
sample = column_names,
condition = ifelse(grepl("^control", column_names), "control", "disease")
)
# Create the design matrix based on your sample information
design <- model.matrix(~ condition, data=sample_info)
# Fit linear model to the log2-transformed data
fit <- lmFit(data_matrix, design)
# Apply empirical Bayes moderation
fit <- eBayes(fit)
# Extract results and adjust for multiple testing
results <- topTable(fit, adjust="fdr", number=Inf)
# Add Ensembl IDs from the row names to the results
results$Ensembl_ID <- rownames(results)
# Rename columns
colnames(results)[colnames(results) == "P.Value"] <- "p_value"
colnames(results)[colnames(results) == "adj.P.Val"] <- "adj_p_value"
# Reorder columns to have Ensembl_ID first
results <- results[, c("Ensembl_ID", setdiff(colnames(results), "Ensembl_ID"))]
# Sort results by descending t-statistic
results_sorted <- results[order(results$t, decreasing=TRUE), ]
# Save sorted and renamed results to a CSV file
write.csv(results_sorted, output_path, row.names=FALSE)
# Optional: View the top results
head(results_sorted)
# Load necessary libraries
library(limma)
library(edgeR)
#Define the input and output path
input_path = "/Users/piamozdzanowski/VU/Fuzzy_Gene_Sets/data/gemma/Alzheimers_GSE95587_formatted.csv"
output_path = "/Users/piamozdzanowski/VU/Fuzzy_Gene_Sets/data/gemma/Alzheimers_GSE95587_ranked.csv"
# Load your log2-transformed and quantile-normalized data
data_matrix <- read.csv(input_path, row.names=1)
# Extract column names
column_names <- colnames(data_matrix)
# Create a data frame with sample information
sample_info <- data.frame(
sample = column_names,
condition = ifelse(grepl("^control", column_names), "control", "disease")
)
# Create the design matrix based on your sample information
design <- model.matrix(~ condition, data=sample_info)
# Fit linear model to the log2-transformed data
fit <- lmFit(data_matrix, design)
# Apply empirical Bayes moderation
fit <- eBayes(fit)
# Extract results and adjust for multiple testing
results <- topTable(fit, adjust="fdr", number=Inf)
# Rename columns
colnames(results)[colnames(results) == "P.Value"] <- "p_value"
colnames(results)[colnames(results) == "adj.P.Val"] <- "adj_p_value"
# Sort results by descending t-statistic
results_sorted <- results[order(results$t, decreasing=TRUE), ]
# Save sorted and renamed results to a CSV file
write.csv(results_sorted, output_path)
# Optional: View the top results
head(results_sorted)
# Load necessary libraries
library(limma)
library(edgeR)
library(tibble)
#Define the input and output path
input_path = "/Users/piamozdzanowski/VU/Fuzzy_Gene_Sets/data/gemma/Alzheimers_GSE95587_formatted.csv"
output_path = "/Users/piamozdzanowski/VU/Fuzzy_Gene_Sets/data/gemma/Alzheimers_GSE95587_ranked.csv"
# Load your log2-transformed and quantile-normalized data
data_matrix <- read.csv(input_path, row.names=1)
# Extract column names
column_names <- colnames(data_matrix)
# Create a data frame with sample information
sample_info <- data.frame(
sample = column_names,
condition = ifelse(grepl("^control", column_names), "control", "disease")
)
# Create the design matrix based on your sample information
design <- model.matrix(~ condition, data=sample_info)
# Fit linear model to the log2-transformed data
fit <- lmFit(data_matrix, design)
# Apply empirical Bayes moderation
fit <- eBayes(fit)
# Extract results and adjust for multiple testing
results <- topTable(fit, adjust="fdr", number=Inf)
# Rename columns
colnames(results)[colnames(results) == "P.Value"] <- "p_value"
colnames(results)[colnames(results) == "adj.P.Val"] <- "adj_p_value"
results <- rownames_to_column(results, "Ensembl_ID")
# Sort results by descending t-statistic
results_sorted <- results[order(results$t, decreasing=TRUE), ]
# Save sorted and renamed results to a CSV file
write.csv(results_sorted, output_path)
# Optional: View the top results
head(results_sorted)
# Load necessary libraries
library(limma)
library(edgeR)
library(tibble)
#Define the input and output path
input_path = "/Users/piamozdzanowski/VU/Fuzzy_Gene_Sets/data/gemma/Alzheimers_GSE95587_formatted.csv"
output_path = "/Users/piamozdzanowski/VU/Fuzzy_Gene_Sets/data/gemma/Alzheimers_GSE95587_ranked.csv"
# Load your log2-transformed and quantile-normalized data
data_matrix <- read.csv(input_path, row.names=1)
# Extract column names
column_names <- colnames(data_matrix)
# Create a data frame with sample information
sample_info <- data.frame(
sample = column_names,
condition = ifelse(grepl("^control", column_names), "control", "disease")
)
# Create the design matrix based on your sample information
design <- model.matrix(~ condition, data=sample_info)
# Fit linear model to the log2-transformed data
fit <- lmFit(data_matrix, design)
# Apply empirical Bayes moderation
fit <- eBayes(fit)
# Extract results and adjust for multiple testing
results <- topTable(fit, adjust="fdr", number=Inf)
# Rename columns
colnames(results)[colnames(results) == "P.Value"] <- "p_value"
colnames(results)[colnames(results) == "adj.P.Val"] <- "adj_p_value"
results <- rownames_to_column(results, "Ensembl_ID")
# Sort results by descending t-statistic
results_sorted <- results[order(results$t, decreasing=TRUE), ]
# Save sorted and renamed results to a CSV file
write.csv(results_sorted, output_path)
# Optional: View the top results
head(results_sorted)
# Load necessary libraries
library(limma)
library(edgeR)
library(tibble)
#Define the input and output path
input_path = "/Users/piamozdzanowski/VU/Fuzzy_Gene_Sets/data/gemma/Alzheimers_GSE95587_formatted.csv"
output_path = "/Users/piamozdzanowski/VU/Fuzzy_Gene_Sets/data/gemma/Alzheimers_GSE95587_ranked.csv"
# Load your log2-transformed and quantile-normalized data
data_matrix <- read.csv(input_path, row.names=1)
# Extract column names
column_names <- colnames(data_matrix)
# Create a data frame with sample information
sample_info <- data.frame(
sample = column_names,
condition = ifelse(grepl("^control", column_names), "control", "disease")
)
# Create the design matrix based on your sample information
design <- model.matrix(~ condition, data=sample_info)
# Fit linear model to the log2-transformed data
fit <- lmFit(data_matrix, design)
# Apply empirical Bayes moderation
fit <- eBayes(fit)
# Extract results and adjust for multiple testing
results <- topTable(fit, adjust="fdr", number=Inf)
# Rename columns
colnames(results)[colnames(results) == "P.Value"] <- "p_value"
colnames(results)[colnames(results) == "adj.P.Val"] <- "adj_p_value"
results <- rownames_to_column(results, "Ensembl_ID")
# Sort results by descending t-statistic
results_sorted <- results[order(results$t, decreasing=TRUE), ]
# Save sorted and renamed results to a CSV file
write.csv(results_sorted, output_path,row.names=1)
# Load necessary libraries
library(limma)
library(edgeR)
library(tibble)
#Define the input and output path
input_path = "/Users/piamozdzanowski/VU/Fuzzy_Gene_Sets/data/gemma/Alzheimers_GSE95587_formatted.csv"
output_path = "/Users/piamozdzanowski/VU/Fuzzy_Gene_Sets/data/gemma/Alzheimers_GSE95587_ranked.csv"
# Load your log2-transformed and quantile-normalized data
data_matrix <- read.csv(input_path, row.names=1)
# Extract column names
column_names <- colnames(data_matrix)
# Create a data frame with sample information
sample_info <- data.frame(
sample = column_names,
condition = ifelse(grepl("^control", column_names), "control", "disease")
)
# Create the design matrix based on your sample information
design <- model.matrix(~ condition, data=sample_info)
# Fit linear model to the log2-transformed data
fit <- lmFit(data_matrix, design)
# Apply empirical Bayes moderation
fit <- eBayes(fit)
# Extract results and adjust for multiple testing
results <- topTable(fit, adjust="fdr", number=Inf)
# Rename columns
colnames(results)[colnames(results) == "P.Value"] <- "p_value"
colnames(results)[colnames(results) == "adj.P.Val"] <- "adj_p_value"
results <- rownames_to_column(results, "Ensembl_ID")
# Sort results by descending t-statistic
results_sorted <- results[order(results$t, decreasing=TRUE), ]
# Save sorted and renamed results to a CSV file
write.csv(results_sorted, output_path)
# Optional: View the top results
head(results_sorted)
# Load necessary libraries
library(limma)
library(edgeR)
library(tibble)
#Define the input and output path
input_path = "/Users/piamozdzanowski/VU/Fuzzy_Gene_Sets/data/gemma/Alzheimers_GSE95587_formatted.csv"
output_path = "/Users/piamozdzanowski/VU/Fuzzy_Gene_Sets/data/gemma/Alzheimers_GSE95587_ranked.csv"
# Load your log2-transformed and quantile-normalized data
data_matrix <- read.csv(input_path, row.names=1)
# Extract column names
column_names <- colnames(data_matrix)
# Create a data frame with sample information
sample_info <- data.frame(
sample = column_names,
condition = ifelse(grepl("^control", column_names), "control", "disease")
)
# Create the design matrix based on your sample information
design <- model.matrix(~ condition, data=sample_info)
# Fit linear model to the log2-transformed data
fit <- lmFit(data_matrix, design)
# Apply empirical Bayes moderation
fit <- eBayes(fit)
# Extract results and adjust for multiple testing
results <- topTable(fit, adjust="fdr", number=Inf)
# Rename columns
colnames(results)[colnames(results) == "P.Value"] <- "p_value"
colnames(results)[colnames(results) == "adj.P.Val"] <- "adj_p_value"
results <- rownames_to_column(results, "Ensembl_ID")
# Sort results by descending t-statistic
results_sorted <- results[order(results$t, decreasing=TRUE), ]
# Save sorted and renamed results to a CSV file
write.csv(results_sorted, output_path,row.names=FALSE)
# Optional: View the top results
head(results_sorted)
