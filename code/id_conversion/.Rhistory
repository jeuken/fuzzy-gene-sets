# Optionally return the combined mapping DataFrame
return(final_mapping)
}
# Example usage of the function
input_ids <- c("ENTREZID", "SYMBOL")  # Specify your input ID types
output_ids <- c("ENSEMBL")            # Specify your output ID types
output_directory <- "../../data/IDs"   # Specify your output directory
combined_mappings <- gene_id_mapping(input_ids, output_ids, output_directory)
# Load the necessary libraries
library(org.Hs.eg.db)
library(AnnotationDbi)
# Define the function to map IDs and save the results
gene_id_mapping <- function(input_id_type, output_id_type, output_dir) {
# Retrieve the mappings from the specified input ID type to the output ID type
id_map <- select(org.Hs.eg.db,
keys = keys(org.Hs.eg.db, keytype = input_id_type),
columns = c(output_id_type),
keytype = input_id_type)
# Remove rows with NA values (if any)
id_map <- na.omit(id_map)
# Rename the columns
colnames(id_map) <- c(input_id_type, output_id_type)
# View the resulting table (optional)
head(id_map)
# Save the table as a txt file with tab-separated values in the specified directory
write.table(id_map,
file.path(output_dir, paste0(input_id_type, "_to_", output_id_type, ".txt")),
sep = "\t",
row.names = FALSE,
quote = FALSE)
return(id_map)  # Return the complete mapping
}
# Example usage of the function
gene_id_mapping("ENTREZID", "ENSEMBL", "../../data/IDs")
# Load the necessary libraries
library(org.Hs.eg.db)
library(AnnotationDbi)
# Define the function to map IDs and save the results
gene_id_mapping <- function(input_id_type, output_id_type, output_dir) {
# Retrieve the mappings from the specified input ID type to the output ID type
id_map <- select(org.Hs.eg.db,
keys = keys(org.Hs.eg.db, keytype = input_id_type),
columns = c(output_id_type),
keytype = input_id_type)
# Remove rows with NA values (if any)
id_map <- na.omit(id_map)
# Rename the columns
colnames(id_map) <- c(input_id_type, output_id_type)
# View the resulting table (optional)
head(id_map)
# Save the table as a txt file with tab-separated values in the specified directory
write.table(id_map,
file.path(output_dir, paste0(input_id_type, "_to_", output_id_type, ".txt")),
sep = "\t",
row.names = FALSE,
quote = FALSE)
return(id_map)  # Return the complete mapping
}
# Example usage of the function
gene_id_mapping("ENTREZID", "ENSEMBL", "../../data/IDs")
# Load the necessary libraries
library(org.Hs.eg.db)
library(AnnotationDbi)
# Define the function to map IDs and save the results
gene_id_mapping <- function(input_id_type, output_id_type, output_dir) {
# Retrieve the mappings from the specified input ID type to the output ID type
id_map <- select(org.Hs.eg.db,
keys = keys(org.Hs.eg.db, keytype = input_id_type),
columns = c(output_id_type),
keytype = input_id_type)
# Remove rows with NA values (if any)
id_map <- na.omit(id_map)
# Rename the columns
colnames(id_map) <- c(input_id_type, output_id_type)
# View the resulting table (optional)
head(id_map)
# Save the table as a txt file with tab-separated values in the specified directory
write.table(id_map,
file.path(output_dir, paste0(input_id_type, "_to_", output_id_type, ".txt")),
sep = "\t",
row.names = FALSE,
quote = FALSE)
return(id_map)  # Return the complete mapping
}
# Example usage of the function
gene_id_mapping("ENTREZID", "ENSEMBL", "../../data/IDs")
# Install the required packages if they are not already installed
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("org.Hs.eg.db")
BiocManager::install("AnnotationDbi")
# Load the libraries
library(org.Hs.eg.db)
library(AnnotationDbi)
library(dplyr)
# Define the function to map IDs and save the results
gene_id_mapping <- function(input_id_type, output_id_type, output_dir) {
# Retrieve the mappings from the specified input ID type to the output ID type
id_map <- select(org.Hs.eg.db,
keys = keys(org.Hs.eg.db, keytype = input_id_type),
columns = c(output_id_type),
keytype = input_id_type)
# Remove rows with NA values (if any)
id_map <- na.omit(id_map)
# Rename the columns
colnames(id_map) <- c(input_id_type, output_id_type)
# View the resulting table (optional)
head(id_map)
# Save the table as a txt file with tab-separated values in the specified directory
write.table(id_map,
file.path(output_dir, paste0(input_id_type, "_to_", output_id_type, ".txt")),
sep = "\t",
row.names = FALSE,
quote = FALSE)
return(id_map)  # Return the complete mapping
}
# Example usage of the function
gene_id_mapping("ENTREZID", "ENSEMBL", "../../data/IDs")
# Install the required packages if they are not already installed
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("org.Hs.eg.db")
BiocManager::install("AnnotationDbi")
# Load the libraries
library(org.Hs.eg.db)
library(AnnotationDbi)
library(dplyr)
# Define the function to map IDs and save the results
gene_id_mapping <- function(input_id_type, output_id_type, output_dir) {
# Retrieve the mappings from the specified input ID type to the output ID type
id_map <- select(org.Hs.eg.db,
keys = keys(org.Hs.eg.db, keytype = input_id_type),
columns = c(output_id_type),
keytype = input_id_type)
# Remove rows with NA values (if any)
id_map <- na.omit(id_map)
# Rename the columns
colnames(id_map) <- c(input_id_type, output_id_type)
# View the resulting table (optional)
head(id_map)
# Save the table as a txt file with tab-separated values in the specified directory
write.table(id_map,
file.path(output_dir, paste0(input_id_type, "_to_", output_id_type, ".txt")),
sep = "\t",
row.names = FALSE,
quote = FALSE)
return(id_map)  # Return the complete mapping
}
# Example usage of the function
gene_id_mapping("ENTREZID", "ENSEMBL", "../../data/IDs")
# Install the required packages if they are not already installed
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("org.Hs.eg.db")
BiocManager::install("AnnotationDbi")
# Load the libraries
library(org.Hs.eg.db)
library(AnnotationDbi)
library(dplyr)
# Define the function to map IDs and save the results
gene_id_mapping <- function(input_id_type, output_id_type, output_dir) {
# Retrieve the mappings from the specified input ID type to the output ID type
id_map <- select(org.Hs.eg.db,
keys = keys(org.Hs.eg.db, keytype = input_id_type),
columns = c(output_id_type),
keytype = input_id_type)
# Remove rows with NA values (if any)
id_map <- na.omit(id_map)
# Rename the columns
colnames(id_map) <- c(input_id_type, output_id_type)
# View the resulting table (optional)
head(id_map)
# Save the table as a txt file with tab-separated values in the specified directory
write.table(id_map,
file.path(output_dir, paste0(input_id_type, "_to_", output_id_type, ".txt")),
sep = "\t",
row.names = FALSE,
quote = FALSE)
return(id_map)  # Return the complete mapping
}
# Example usage of the function
gene_id_mapping("ENTREZID", "ENSEMBL", "../../data/IDs")
View(gene_id_mapping)
# Load the necessary libraries
library(org.Hs.eg.db)
library(AnnotationDbi)
# Define the function to map IDs and save the results
gene_id_mapping <- function(input_id_type, output_id_type, output_dir) {
# Retrieve the mappings from the specified input ID type to the output ID type
id_map <- select(org.Hs.eg.db,
keys = keys(org.Hs.eg.db, keytype = input_id_type),
columns = c(output_id_type),
keytype = input_id_type)
# Remove rows with NA values (if any)
id_map <- na.omit(id_map)
# Rename the columns
colnames(id_map) <- c(input_id_type, output_id_type)
# View the resulting table (optional)
head(id_map)
# Save the table as a txt file with tab-separated values in the specified directory
write.table(id_map,
file.path(output_dir, paste0(input_id_type, "_to_", output_id_type, ".txt")),
sep = "\t",
row.names = FALSE,
quote = FALSE)
return(id_map)  # Return the complete mapping
}
# Example usage of the function
gene_id_mapping("ENTREZID", "ENSEMBL", "../../data/IDs")
gene_id_mapping("SYMBOL", "ENSEMBL", "../../data/IDs")
# Load the necessary libraries
library(org.Hs.eg.db)
library(AnnotationDbi)
library(dplyr)
# Define the function to map IDs and save the results
gene_id_mapping <- function(input_id_type, output_id_type, output_dir) {
# Retrieve the mappings from the specified input ID type to the output ID type
id_map <- select(org.Hs.eg.db,
keys = keys(org.Hs.eg.db, keytype = input_id_type),
columns = c(output_id_type),
keytype = input_id_type)
# Remove rows with NA values in both input and output ID columns
id_map <- id_map[!is.na(id_map[[input_id_type]]) & !is.na(id_map[[output_id_type]]), ]
# Rename the columns for clarity
colnames(id_map) <- c(input_id_type, output_id_type)
# Keep only the first Ensembl ID for each unique input ID
id_map_unique <- id_map %>%
group_by(!!sym(input_id_type)) %>%
slice(1) %>%
ungroup()
# Create the output directory if it doesn't exist
if (!dir.exists(output_dir)) {
dir.create(output_dir, recursive = TRUE)
}
# Save the table as a txt file with tab-separated values in the specified directory
write.table(id_map_unique,
file.path(output_dir, paste0(input_id_type, "_to_", output_id_type, ".txt")),
sep = "\t",
row.names = FALSE,
quote = FALSE)
return(id_map_unique)  # Return the complete unique mapping
}
# Example usage of the function
entrez_mapping <- gene_id_mapping("ENTREZID", "ENSEMBL", "../../data/IDs")
# Load the necessary libraries
library(org.Hs.eg.db)
library(AnnotationDbi)
# Define the function to map IDs and save the results
gene_id_mapping <- function(input_id_type, output_id_type, output_dir) {
# Retrieve the mappings from the specified input ID type to the output ID type
id_map <- select(org.Hs.eg.db,
keys = keys(org.Hs.eg.db, keytype = input_id_type),
columns = c(output_id_type),
keytype = input_id_type)
# Remove rows with NA values (if any)
id_map <- na.omit(id_map)
# Rename the columns
colnames(id_map) <- c(input_id_type, output_id_type)
# View the resulting table (optional)
head(id_map)
# Save the table as a txt file with tab-separated values in the specified directory
write.table(id_map,
file.path(output_dir, paste0(input_id_type, "_to_", output_id_type, ".txt")),
sep = "\t",
row.names = FALSE,
quote = FALSE)
return(id_map)  # Return the complete mapping
}
# Example usage of the function
gene_id_mapping("ENTREZID", "ENSEMBL", "../../data/IDs")
# Load the necessary libraries
library(org.Hs.eg.db)
library(AnnotationDbi)
library(dplyr)
# Define the function to map IDs and save the results
gene_id_mapping <- function(input_id_type, output_id_type, output_dir) {
# Retrieve the mappings from the specified input ID type to the output ID type
keys_list <- keys(org.Hs.eg.db, keytype = input_id_type)
# Check if keys_list is empty
if (length(keys_list) == 0) {
stop("No keys found for the specified input ID type.")
}
id_map <- select(org.Hs.eg.db,
keys = keys_list,
columns = c(output_id_type),
keytype = input_id_type)
# Remove rows with NA values in the output ID
id_map <- id_map[!is.na(id_map[[output_id_type]]), ]
# Rename the columns for clarity
colnames(id_map) <- c(input_id_type, output_id_type)
# Ensure unique mappings: keep only the first Ensembl ID for each input ID
id_map_unique <- id_map %>%
group_by(!!sym(input_id_type)) %>%
slice(1) %>%
ungroup()
# Create the output directory if it doesn't exist
if (!dir.exists(output_dir)) {
dir.create(output_dir, recursive = TRUE)
}
# Save the table as a txt file with tab-separated values in the specified directory
write.table(id_map_unique,
file.path(output_dir, paste0(input_id_type, "_to_", output_id_type, ".txt")),
sep = "\t",
row.names = FALSE,
quote = FALSE)
return(id_map_unique)  # Return the complete unique mapping
}
# Example usage of the function
entrez_mapping <- gene_id_mapping("ENTREZID", "ENSEMBL", "../../data/IDs")
# Load the necessary libraries
library(org.Hs.eg.db)
library(AnnotationDbi)
# Define the function to map IDs and save the results
gene_id_mapping <- function(input_id_type, output_id_type, output_dir) {
# Retrieve the mappings from the specified input ID type to the output ID type
id_map <- select(org.Hs.eg.db,
keys = keys(org.Hs.eg.db, keytype = input_id_type),
columns = c(output_id_type),
keytype = input_id_type)
# Remove rows with NA values (if any)
id_map <- na.omit(id_map)
# Rename the columns
colnames(id_map) <- c(input_id_type, output_id_type)
# View the resulting table (optional)
head(id_map)
# Save the table as a txt file with tab-separated values in the specified directory
write.table(id_map,
file.path(output_dir, paste0(input_id_type, "_to_", output_id_type, ".txt")),
sep = "\t",
row.names = FALSE,
quote = FALSE)
return(id_map)  # Return the complete mapping
}
# Example usage of the function
gene_id_mapping("ENTREZID", "ENSEMBL", "../../data/IDs")
View(gene_id_mapping)
# Load the necessary libraries
library(org.Hs.eg.db)
library(AnnotationDbi)
# Define the function to map IDs and save the results
gene_id_mapping <- function(input_id_type, output_id_type, output_dir) {
# Retrieve the mappings from the specified input ID type to the output ID type
id_map <- select(org.Hs.eg.db,
keys = keys(org.Hs.eg.db, keytype = input_id_type),
columns = c(output_id_type),
keytype = input_id_type)
# Remove rows with NA values (if any)
id_map <- na.omit(id_map)
# Rename the columns
colnames(id_map) <- c(input_id_type, output_id_type)
# View the resulting table (optional)
head(id_map)
# Save the table as a txt file with tab-separated values in the specified directory
write.table(id_map,
file.path(output_dir, paste0(input_id_type, "_to_", output_id_type, ".txt")),
sep = "\t",
row.names = FALSE,
quote = FALSE)
return(id_map)  # Return the complete mapping
}
# Example usage of the function
gene_id_mapping("ENTREZID", "ENSEMBL", "../../data/IDs")
# Load the necessary libraries
library(org.Hs.eg.db)
library(AnnotationDbi)
# Define the function to map IDs and save the results
gene_id_mapping <- function(input_id_type, output_id_type, output_dir) {
# Retrieve the mappings from the specified input ID type to the output ID type
id_map <- select(org.Hs.eg.db,
keys = keys(org.Hs.eg.db, keytype = input_id_type),
columns = c(output_id_type),
keytype = input_id_type)
# Remove rows with NA values (if any)
id_map <- na.omit(id_map)
# Rename the columns
colnames(id_map) <- c(input_id_type, output_id_type)
# View the resulting table (optional)
head(id_map)
# Save the table as a txt file with tab-separated values in the specified directory
write.table(id_map,
file.path(output_dir, paste0(input_id_type, "_to_", output_id_type, ".txt")),
sep = "\t",
row.names = FALSE,
quote = FALSE)
return(id_map)  # Return the complete mapping
}
# Example usage of the function
gene_id_mapping("ENTREZID", "ENSEMBL", "../../data/IDs")
# Load the necessary libraries
library(org.Hs.eg.db)
library(AnnotationDbi)
library(dplyr)
# Define the function to map IDs and save the results
gene_id_mapping <- function(input_id_type, output_id_type, output_dir) {
# Ensure valid input_id_type and output_id_type
valid_id_types <- c("ENTREZID", "SYMBOL", "ENSEMBL")
if (!(input_id_type %in% valid_id_types) || !(output_id_type %in% valid_id_types)) {
stop("Input ID type and output ID type must be one of: ENTREZID, SYMBOL, ENSEMBL.")
}
# Retrieve the mappings from the specified input ID type to the output ID type
id_map <- tryCatch({
select(org.Hs.eg.db,
keys = keys(org.Hs.eg.db, keytype = input_id_type),
columns = c(output_id_type),
keytype = input_id_type)
}, error = function(e) {
stop("Failed to retrieve mappings: ", e$message)
})
# Remove rows with NA values in both input and output ID columns
id_map <- id_map[!is.na(id_map[[input_id_type]]) & !is.na(id_map[[output_id_type]]), ]
# Rename the columns for clarity
colnames(id_map) <- c(input_id_type, output_id_type)
# Keep only the first Ensembl ID for each unique input ID
id_map_unique <- id_map %>%
group_by(!!sym(input_id_type)) %>%
slice(1) %>%
ungroup()
# Create the output directory if it doesn't exist
if (!dir.exists(output_dir)) {
dir.create(output_dir, recursive = TRUE)
}
# Save the table as a txt file with tab-separated values in the specified directory
write.table(id_map_unique,
file.path(output_dir, paste0(input_id_type, "_to_", output_id_type, ".txt")),
sep = "\t",
row.names = FALSE,
quote = FALSE)
return(id_map_unique)  # Return the complete unique mapping
}
# Example usage of the function
entrez_mapping <- gene_id_mapping("ENTREZID", "ENSEMBL", "../../data/IDs")
# Load the necessary libraries
library(org.Hs.eg.db)
library(AnnotationDbi)
library(dplyr)
# Define the function to map IDs and save the results
gene_id_mapping <- function(input_id_type, output_id_type, output_dir) {
# Ensure valid input_id_type and output_id_type
valid_id_types <- c("ENTREZID", "SYMBOL", "ENSEMBL")
if (!(input_id_type %in% valid_id_types) || !(output_id_type %in% valid_id_types)) {
stop("Input ID type and output ID type must be one of: ENTREZID, SYMBOL, ENSEMBL.")
}
# Retrieve the keys for the specified input ID type
keys_input <- keys(org.Hs.eg.db, keytype = input_id_type)
# Retrieve the mappings from the specified input ID type to the output ID type
id_map <- select(org.Hs.eg.db,
keys = keys_input,
columns = output_id_type,
keytype = input_id_type)
# Remove rows with NA values in both input and output ID columns
id_map <- id_map[!is.na(id_map[[input_id_type]]) & !is.na(id_map[[output_id_type]]), ]
# Rename the columns for clarity
colnames(id_map) <- c(input_id_type, output_id_type)
# Keep only the first Ensembl ID for each unique input ID
id_map_unique <- id_map %>%
group_by(!!sym(input_id_type)) %>%
slice(1) %>%
ungroup()
# Create the output directory if it doesn't exist
if (!dir.exists(output_dir)) {
dir.create(output_dir, recursive = TRUE)
}
# Save the table as a txt file with tab-separated values in the specified directory
write.table(id_map_unique,
file.path(output_dir, paste0(input_id_type, "_to_", output_id_type, ".txt")),
sep = "\t",
row.names = FALSE,
quote = FALSE)
return(id_map_unique)  # Return the complete unique mapping
}
# Example usage of the function
entrez_mapping <- gene_id_mapping("ENTREZID", "ENSEMBL", "../../data/IDs")
# Load the necessary libraries
library(org.Hs.eg.db)
library(AnnotationDbi)
# Retrieve the mappings from gene symbols to Ensembl gene IDs
gene_symbol_to_ensembl <- select(org.Hs.eg.db,
keys = keys(org.Hs.eg.db, keytype = "SYMBOL"),
columns = c("ENSEMBL"),
keytype = "SYMBOL")
sessionInfo()
install.packages("KEGGREST")
# Install the necessary package if it's not already installed
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
if (!requireNamespace("org.Hs.eg.db", quietly = TRUE))
BiocManager::install("org.Hs.eg.db")
# Load the required library
library(org.Hs.eg.db)
# Retrieve all Entrez Gene IDs for Homo sapiens (human)
all_entrez_ids <- keys(org.Hs.eg.db, keytype = "ENTREZID")
# Save the list of Entrez IDs to a file
write.table(all_entrez_ids, file = "human_entrez_gene_ids.txt", row.names = FALSE, col.names = FALSE, quote = FALSE)
# Print the first few IDs to confirm
print(head(all_entrez_ids))
# Install KEGGREST if not already installed
if (!requireNamespace("KEGGREST", quietly = TRUE))
install.packages("KEGGREST")
# Load the required library
library(KEGGREST)
# Example: List of human Entrez Gene IDs to convert
entrez_ids <- c("10000", "10001", "10002")  # Replace with your list of IDs
# Function to convert Entrez Gene IDs to KEGG IDs for Homo sapiens (hsa)
convert_entrez_to_kegg <- function(entrez_ids, organism = "hsa") {
# Use KEGGREST's keggConv function
kegg_ids <- keggConv(paste0("ncbi-geneid:", entrez_ids), organism)
# Format the result as a named vector (Entrez -> KEGG)
kegg_id_mapping <- sapply(kegg_ids, function(x) sub(paste0(organism, ":"), "", x))
return(kegg_id_mapping)
}
# Perform the conversion
kegg_ids <- convert_entrez_to_kegg(entrez_ids)
